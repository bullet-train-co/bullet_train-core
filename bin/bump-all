#!/usr/bin/env ruby

require 'thor'

class CoreBumpCLI < Thor
  desc "bump BUMP_LEVEL", "Bump the versions of bullet_train-core gems and npm packages. BUMP_LEVEL should be major, minor, or patch."
  option :allow_local
  def bump(bump_level)
    if !bump_level || !['patch', 'minor', 'major'].include?(bump_level)
      say_error "Invalid or no version bump specified. Should be one of: patch, minor, major", :red
      if bump_level
        say_error "Version bump supplied: #{bump_level}", :red
      end
      return
    end
    if !github_output_file && !options[:allow_local]
      banner = <<~BANNER
        --------------------------------------------------------------------------------------------------------
        - It looks like you're running this scirpt locally.
        - This script was designed to run as part of a GitHub workflow.
        - The workflow will prepare a speically formatted PR that will kick off other workflows when merged.
        - We don't recommend using this script locally to make updates directly to the core repo.
        -
        - You can run the workflow by going here:
        - https://github.com/bullet-train-co/bullet_train-core/actions/workflows/version-bump.yml
        -
        - If you really want to run this locally you should make sure you're not on the `main` branch,
        - and then you can pass the `--allow-local` flag to skip this notice and run the script.
        -
        - For example:
        - ./bin/bump-all patch --allow-local
        -------------------------------------------------------------------------------------------------------
      BANNER
      say_error banner, :red
      return
    end

    bump_top_level(bump_level)
    bump_ruby_gems(bump_level)
    bump_npm_packages
    write_to_github_output_file
  end

  # This allows failure to be reported to the shell correctly.
  # https://github.com/rails/thor/wiki/Making-An-Executable
  def self.exit_on_failure?
    true
  end

  # This allows us to define helper methods that aren't attached to thor commands
  no_commands do
    def github_output_file
      ENV['GITHUB_OUTPUT']
    end

    def bump_top_level(bump_level)
      # First we run `bump` at the top level, this acts as the authorative gem version.
      # We have a fake version file in `lib`, just to keep `bump` happy.

      puts "bumping core"
      puts output = `bump #{bump_level} --tag --no-commit`
      @version = output.chomp.lines.last.chomp
      puts "Bumped to #{@version}."
    end

    def bump_ruby_gems(bump_level)
      # Now we bump each of the sub gems
      ruby_gems.each do |package|
        puts "bumping package: #{package}"
        Dir.chdir "./#{package}"
        puts output = `bump #{bump_level}`
        Dir.chdir ".."
      end
    end

    def bump_npm_packages
      # And now we munge the package.json files
      npm_packages.each do |package|
        puts "bumping npm package: #{package}"
        Dir.chdir "./#{package}"

        text = File.read("package.json")
        new_contents = text.gsub(/"version": ".*"/, "\"version\": \"#{@version}\"")
        File.open("package.json", "w") { |file| file.puts new_contents }

        Dir.chdir ".."
      end
    end

    def write_to_github_output_file
      if github_output_file
        puts "The new version to pass to the GitHub output file = #{@version}"
        IO.write(github_output_file, "NEW_VERSION_NUMBER=#{@version}\n", mode: 'a')
      else
        say "We don't seem to be running in GitHub actions. Skipping the GitHub output file."
      end
    end

    def ruby_gems
      %w(
        bullet_train
        bullet_train-api
        bullet_train-fields
        bullet_train-has_uuid
        bullet_train-incoming_webhooks
        bullet_train-integrations
        bullet_train-integrations-stripe
        bullet_train-obfuscates_id
        bullet_train-outgoing_webhooks
        bullet_train-roles
        bullet_train-scope_questions
        bullet_train-scope_validator
        bullet_train-sortable
        bullet_train-super_load_and_authorize_resource
        bullet_train-super_scaffolding
        bullet_train-themes
        bullet_train-themes-light
        bullet_train-themes-tailwind_css
      )
    end

    def npm_packages
      %w(
        bullet_train
        bullet_train-fields
        bullet_train-sortable
      )
    end
  end
end

# We create our own args array so that we don't have to ask the user to include `bump` on the command line
args = ["bump"] + ARGV

CoreBumpCLI.start(args)
