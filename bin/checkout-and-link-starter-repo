#!/usr/bin/env bash

# Look for a matching branch on the starter repository when running tests on CircleCI.
CI_BRANCH=$CIRCLE_BRANCH
if [[ -v CI_BRANCH ]]
then
  # Default to the main branch if we don't find a matching branch on the starter repository.
  STARTER_REPO_BRANCH="main"
  BRANCH_NAMES_JSON=$(curl -H "Accept: application.vnd.github+json" https://api.github.com/repos/bullet-train-co/bullet_train/branches)
  echo "This is what we're getting from the GitHub API:\n\n${BRANCH_NAMES_JSON}"
  BRANCH_NAMES=$(echo $BRANCH_NAMES_JSON | jq -r '.[].name')
  echo "These are the branches on the starter repo:\n\n${BRANCH_NAMES}"

  for BRANCH in $BRANCH_NAMES; do
    if [ ${BRANCH} == $CIRCLE_BRANCH ]
    then
      STARTER_REPO_BRANCH=$BRANCH
      break
    fi
  done

  echo "Cloning from ${STARTER_REPO_BRANCH}..."
  git clone -b $STARTER_REPO_BRANCH https://github.com/bullet-train-co/bullet_train.git .
else
  git clone https://github.com/bullet-train-co/bullet_train.git .
fi

packages=(
  "bullet_train"
  "bullet_train-api"
  "bullet_train-fields"
  "bullet_train-has_uuid"
  "bullet_train-incoming_webhooks"
  "bullet_train-integrations"
  "bullet_train-integrations-stripe"
  "bullet_train-obfuscates_id"
  "bullet_train-outgoing_webhooks"
  "bullet_train-roles"
  "bullet_train-scope_questions"
  "bullet_train-scope_validator"
  "bullet_train-sortable"
  "bullet_train-super_load_and_authorize_resource"
  "bullet_train-super_scaffolding"
  "bullet_train-themes"
  "bullet_train-themes-light"
  "bullet_train-themes-tailwind_css"
)

for package in "${packages[@]}"
do
  :
  grep -v "gem \"$package\"" Gemfile > Gemfile.tmp
  mv Gemfile.tmp Gemfile
  echo "gem \"$package\", path: \"../../$package\"" >> Gemfile
done

updates="${packages[@]}"
bundle lock --update $updates
