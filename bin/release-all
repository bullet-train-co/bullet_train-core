#!/usr/bin/env ruby

require 'thor'

class CoreBumpCLI < Thor
  desc "release", "Build ruby gems & npm packages and push them to their respective platforms."
  option :allow_local
  def release
    if !github_output_file && !options[:allow_local]
      banner = <<~BANNER
        --------------------------------------------------------------------------------------------------------
        - It looks like you're running this scirpt locally.
        - This script was designed to run as part of a GitHub workflow.
        - We don't recommend using this script locally to directly publish gems and packages.
        -
        - You can run the workflow by going here:
        - https://github.com/bullet-train-co/bullet_train-core/actions/workflows/version-bump.yml
        -
        - If you really want to run this locally you should make sure you're not on the `main` branch,
        - and then you can pass the `--allow-local` flag to skip this notice and run the script.
        -
        - For example:
        - ./bin/release-all --allow-local
        -------------------------------------------------------------------------------------------------------
      BANNER
      say_error banner, :red
      return
    end

    puts output = `bump current`
    @version = output.chomp.lines.last.chomp
    "Releasing version: #{@version}"

    release_ruby_gems
    release_npm_packages
    write_to_github_output_file
  end

  # This allows failure to be reported to the shell correctly.
  # https://github.com/rails/thor/wiki/Making-An-Executable
  def self.exit_on_failure?
    true
  end

  # This allows us to define helper methods that aren't attached to thor commands
  no_commands do
    def github_output_file
      ENV['GITHUB_OUTPUT']
    end

    def release_ruby_gems
      ruby_gems.each do |package|
        puts "releasing package: #{package}"
        Dir.chdir "./#{package}"

        puts output = `gem build`
        gem_file = output.chomp.lines.last.chomp.split.last
        puts "Built gem file: #{gem_file}"

        puts output = `gem push #{gem_file}`

        File.delete(gem_file)

        Dir.chdir ".."

      end
    end

    def release_npm_packages
      npm_packages.each do |package|
        puts "releasing npm package: #{package}"
        Dir.chdir "./#{package}"

        puts `yarn`
        puts `yarn build`
        puts output = `yarn pack`
        npm_file = output.chomp.lines[1].split("/").last.split("\"").first
        puts "Built npm file: #{npm_file}"

        puts output = `yarn publish #{npm_file} --new-version #{@version}`

        File.delete(npm_file)

        Dir.chdir ".."
      end
    end

    def write_to_github_output_file
      if github_output_file
        puts "The new version to pass to the GitHub output file = #{@version}"
        IO.write(github_output_file, "NEW_VERSION_NUMBER=#{@version}\n", mode: 'a')
      else
        say "We don't seem to be running in GitHub actions. Skipping the GitHub output file."
      end
    end

    def ruby_gems
      Dir.glob("*/*.gemspec").map{|gemspec| gemspec.split("/").first }
    end

    def npm_packages
      Dir.glob("*/package.json").map{|package| package.split("/").first }
    end
  end
end

# We create our own args array so that we don't have to ask the user to include `release` on the command line
args = ["release"] + ARGV

CoreBumpCLI.start(args)
