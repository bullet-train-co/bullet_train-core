version: 2.1
orbs:
  ruby: circleci/ruby@0.1.2
  browser-tools: circleci/browser-tools@1.4.1
  jq: circleci/jq@2.2.0
aliases:
  - &restore_bundler_cache
      name: Restore Bundler cache
      keys:
        - gem-cache-v1-{{ .Environment.CIRCLE_WORKING_DIRECTORY }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
        - gem-cache-v1-{{ .Environment.CIRCLE_WORKING_DIRECTORY }}-{{ .Branch }}-
        - gem-cache-v1-{{ .Environment.CIRCLE_WORKING_DIRECTORY }}-
        - gem-cache-v1-
  - &restore_yarn_cache
      name: Restore Yarn cache
      keys:
        - yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
        - yarn-packages-v1-{{ .Branch }}-
        - yarn-packages-
  - &save_bundler_cache
      name: Save Bundler cache
      key: gem-cache-v1-{{ .Environment.CIRCLE_WORKING_DIRECTORY }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
      paths:
        - vendor/bundle
  - &save_yarn_cache
      name: Save Yarn cache
      key: yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
      paths:
        - node_modules
  - &ruby_node_browsers_docker_image
      - image: cimg/ruby:3.2.0-browsers
        environment:
          PGHOST: localhost
          PGUSER: untitled_application
          RAILS_ENV: test
  - &postgres_docker_image
      - image: circleci/postgres
        environment:
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_DB: untitled_application_test
          POSTGRES_USER: untitled_application
  - &wait_for_docker
      # We run this because the DB might not be available for a while due to a race condition.
      run: dockerize -wait tcp://localhost:5432 -timeout 1m
jobs:
  'Local Minitest':
    docker:
      - <<: *ruby_node_browsers_docker_image
      - <<: *postgres_docker_image
      - image: circleci/redis
    executor: ruby/default
    steps:
      - checkout
      - browser-tools/install-browser-tools:
          firefox-version: 108.0.1

      # Install dependencies
      - run: "bundle install"
      - run: "bundle clean --force"
      - run: "yarn install"
      - *wait_for_docker
      - run:
          name: Run unit tests
          command: bundle exec rails test

  'Local Standard Ruby':
    docker:
      - <<: *ruby_node_browsers_docker_image
    steps:
      - checkout

      # TODO Figure out how to make these work for `tmp/starter`
      # # Restore dependency caches
      # - restore_cache: *restore_bundler_cache
      # - restore_cache: *restore_yarn_cache

      # Install dependencies
      - ruby/bundle-install
      - run: bundle clean --force

      # # Save dependency caches
      # # We only do this as part of this job, because it's time consuming and we don't want it to slow down test runners.
      # - save_cache: *save_bundler_cache
      # - save_cache: *save_yarn_cache

      - run:
          name: Check Standard Ruby
          command: bundle exec standardrb

  'Starter Repo Minitest':
    docker:
      - <<: *ruby_node_browsers_docker_image
      - <<: *postgres_docker_image
      - image: circleci/redis
    executor: ruby/default
    working_directory: tmp/starter
    environment:
      BUNDLE_PATH: vendor/bundle
    parallelism: 16
    steps:
      - checkout:
          path: ~/project
      - browser-tools/install-browser-tools:
          firefox-version: 108.0.1

      - run: ../../bin/checkout-and-link-starter-repo

      - restore_cache: *restore_bundler_cache
      - run: bundle install
      - run: bundle clean --force
      - run: bundle exec rake bt:link
      - run: yarn install
      - run: yarn build
      - run: yarn build:css

      - save_cache: *save_bundler_cache

      # TODO Figure out how to make these work for `tmp/starter`
      # - restore_cache: *restore_yarn_cache

      - *wait_for_docker

      - run:
          name: Run tests with Knapsack Pro
          command: bundle exec rails "knapsack_pro:queue:minitest[--verbose]"
          environment:
            RAILS_ENV: test
            KNAPSACK_PRO_CI_NODE_TOTAL: 16

      # If you don't want to use Knapsack Pro, then use this configuration:
      #
      # - run:
      #     name: Run unit tests
      #     command: bundle exec rails test
      # - run:
      #     name: Run system tests
      #     command: bundle exec rails test:system
      #
      # If you want to gather test results in CircleCI when not running tests in parallel,
      # include `minitest-ci` in your Gemfile and uncomment the following step.
      # You can access the test results via the "Tests" tab within each build in CircleCI.
      #
      # - store_test_results:
      #     path: test/reports

  'Starter Repo Minitest for Super Scaffolding':
    docker:
      - <<: *ruby_node_browsers_docker_image
      - <<: *postgres_docker_image
      - image: circleci/redis
    executor: ruby/default
    working_directory: tmp/starter
    environment:
      BUNDLE_PATH: vendor/bundle
    parallelism: 16
    steps:
      - checkout:
          path: ~/project
      - browser-tools/install-browser-tools:
          firefox-version: 108.0.1

      - run: ../../bin/checkout-and-link-starter-repo

      - restore_cache: *restore_bundler_cache
      - run: bundle install
      - run: bundle clean --force
      - run: bundle exec rake bt:link
      - run: yarn install
      - run: yarn build
      - run: yarn build:css

      - save_cache: *save_bundler_cache

      # TODO Figure out how to make these work for `tmp/starter`
      # - restore_cache: *restore_yarn_cache

      - *wait_for_docker

      - run: "bundle add spring"
      - run:
          name: 'Setup Super Scaffolding System Test'
          command: "bundle exec test/bin/setup-super-scaffolding-system-test"
      - run:
          name: 'Run Super Scaffolding Test'
          command: "bundle exec rails test test/system/super_scaffolding_test.rb"

workflows:
  version: 2
  build:
    jobs:
      # - 'Local Minitest'
      - 'Local Standard Ruby'
      - 'Starter Repo Minitest'
      - 'Starter Repo Minitest for Super Scaffolding'
