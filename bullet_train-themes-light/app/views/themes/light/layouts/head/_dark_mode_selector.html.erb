<script>
  class ColorSchemeSelector {
    constructor() {
      this.storageKey = 'prefers_color_scheme';
      this.eventName = 'color-scheme-changed';
      this.el = document.documentElement;
      this.mq = window.matchMedia('(prefers-color-scheme: dark)');
      
      this.mq.addEventListener('change', e => !this.stored && this.set(e.matches ? 'dark' : 'light', false));
      if (!this.el.className.match(/\b(light|dark)\b/)) this.set(this.stored ?? this.#auto(), !this.stored);
    }

    set(scheme, persist = true) {
      if (!['dark', 'light', null].includes(scheme)) throw new Error('Invalid color scheme');
      this.el.classList.remove('dark', 'light');
      this.el.classList.add(scheme ?? this.#auto());
      document.dispatchEvent(new CustomEvent(this.eventName, { detail: { colorScheme: scheme } }));
      if (persist) scheme === null ? localStorage.removeItem(this.storageKey) : localStorage.setItem(this.storageKey, scheme);
    }

    get current() { return this.el.classList.contains('dark') ? 'dark' : 'light'; }
    get stored() { return localStorage.getItem(this.storageKey); }
    #auto() { return this.mq.matches ? 'dark' : 'light'; }
  }

  window.colorScheme = new ColorSchemeSelector();
</script>